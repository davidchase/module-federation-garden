kind: Project
name: react-mf-expirement
defaultEnvironment: local
environments:
  - name: local
    variables:
      baseHostname: reactmf.local.demo.garden
providers:
  - name: local-kubernetes
    environments: [local]
---
kind: Module
description: VirtualBucket
name: vmbucket
type: container
dockerfile: apps/bucket/Dockerfile
include:
  - apps/bucket
  - "./pnpm-lock.yaml"
hotReload:
  sync:
  - target: /app
services:
  - name: vmbucket
    args: ["node", "apps/bucket/dist/index.js"]
    ports:
      - name: http
        protocol: TCP
        containerPort: 5001
    healthCheck:
      httpGet:
        path: /health
        port: http
    ingresses:
      - path: /
        port: http
        hostname: vmbucket.${var.baseHostname}
    env:
      HOSTNAME: vmbucket.${var.baseHostname}
---
kind: Module
description: Data Access Service
name: dataaccess
type: container
dockerfile: apps/data-access/Dockerfile
include:
  - apps/data-acccess/
  - "./pnpm-lock.yaml"
hotReload:
  sync:
  - target: /app
services:
  - name: dataaccess
    args: ["node",  "apps/data-access/dist/index.js"]
    ports:
      - name: http
        protocol: TCP
        containerPort: 5002
    healthCheck:
      httpGet:
        path: /health
        port: http
    ingresses:
      - path: /
        port: http
        hostname: dataaccess.${var.baseHostname}
    env:
      HOSTNAME: dataaccess.${var.baseHostname}
      PGDATABASE:
        secretRef:
          name: pg-name
          key: pg-dbname
      PGUSER:
        secretRef:
          name: pg-user
          key: pg-username
      PGPASSWORD: 
        secretRef:
          name: pg-pass
          key: pg-password
    dependencies:
      - db
---
kind: Module
description: Main Server
name: mainserver
type: container
dockerfile: apps/main-server/Dockerfile
include:
  - apps/main-server
  - "./pnpm-lock.yaml"
hotReload:
  sync:
  - target: /app
services:
  - name: mainserver
    args: ["node", "apps/main-server/dist/index.js"]
    devMode:
      sync:
        - target: /app
          source: app
          mode: one-way
    ports:
      - name: http
        protocol: TCP
        containerPort: 5003
    healthCheck:
      httpGet:
        path: /health
        port: http
    ingresses:
      - path: /
        port: http
        hostname: mainserver.${var.baseHostname}
    env:
      HOSTNAME: mainserver.${var.baseHostname}
      PGDATABASE:
        secretRef:
          name: pg-name
          key: pg-dbname
      PGUSER:
        secretRef:
          name: pg-user
          key: pg-username
      PGPASSWORD: 
        secretRef:
          name: pg-pass
          key: pg-password
    dependencies:
      - vmbucket
      - db
---
kind: Module
description: Main UI
name: hostui
type: container
dockerfile: apps/main-ui/Dockerfile
include:
  - apps/main-ui
  - "./pnpm-lock.yaml"
  - "./npmrc"
services:
  - name: hostui
    args: [npm, run, serve]
    devMode:
      sync:
        - target: /app/src
          source: src
          mode: one-way
    ports:
      - name: http
        containerPort: 5004
    healthCheck:
      httpGet:
        path: /
        port: http
    ingresses:
      - path: /
        port: http
        hostname: hostui.${var.baseHostname}
    env:
      HOSTNAME: hostui.${var.baseHostname}
---
kind: Module
description: Postgres container
type: container
name: postgres
image: postgres:15.2-alpine3.17
include:
  - apps/postgres/world.sql
  - "./pnpm-lock.yaml"
services:
  - name: db
    volumes:
      - name: data
        containerPath: /db-data
    ports:
      - name: db
        containerPort: 5432
    env:
      POSTGRES_DB:
        secretRef:
          name: pg-name
          key: pg-dbname
      POSTGRES_PASSWORD:
        secretRef:
          name: pg-pass
          key: pg-password
      POSTGRES_USER:
        secretRef:
          name: pg-user
          key: pg-username
    healthCheck:
      command:
        - /bin/sh
        - -c
        - 'env PGPASSWORD="$POSTGRES_PASSWORD" psql -w -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c ''SELECT 1'''
tasks:
  - name: initdb
    command: [/bin/sh, -c]
    args: ["cp /world.sql /docker-entrypoint-initdb.d/"]
    dependencies:
      - db
---
kind: Module
description: Remote Server
name: remoteserver
type: container
dockerfile: apps/remote-server/Dockerfile
include:
  - apps/remote-server
  - "./pnpm-lock.yaml"
hotReload:
  sync:
  - target: /app
services:
  - name: remoteserver
    args: ["node", "apps/remote-server/dist/index.js"]
    devMode:
      sync:
        - target: /app
          source: app
          mode: one-way
    ports:
      - name: http
        protocol: TCP
        containerPort: 5005
    healthCheck:
      httpGet:
        path: /health
        port: http
    ingresses:
      - path: /
        port: http
        hostname: remoteserver.${var.baseHostname}
    env:
      HOSTNAME: remoteserver.${var.baseHostname}
---
kind: Module
description: Remote UI
name: remoteui
type: container
dockerfile: apps/remote-ui/Dockerfile
include:
  - apps/remote-ui
  - "./pnpm-lock.yaml"
  - "./npmrc"
services:
  - name: remoteui
    args: [npm, run, serve]
    devMode:
      sync:
        - target: /app/src
          source: src
          mode: one-way
    ports:
      - name: http
        containerPort: 5006
    healthCheck:
      httpGet:
        path: /
        port: http
    ingresses:
      - path: /
        port: http
        hostname: remoteui.${var.baseHostname}
    env:
      HOSTNAME: remoteui.${var.baseHostname}